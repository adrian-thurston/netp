void generatePacketHeader( P: program )
{
	Output = new parser<out_c::out_c>()

	send Output
		~/*
		~ * packet_gen.h
		~ */
		~
		~#ifndef __PACKET_GEN_H
		~#define __PACKET_GEN_H
		~
		~#include <sys/types.h>
		~#include <sys/socket.h>
		~#include <errno.h>
		~
		~#include <genf/packet.h>
		~
		~struct PacketWriter;
		~

	for Packet: packet in PacketMap {
		send Output
			"struct [Packet->Id]
			"	: public GenF::Packet
			"{

		for FD: pkt_field_def in Packet->PacketDef {
			switch FD.pkt_field_type
			case [`bool] {
				send Output
					"	bool [FD.id];
			}
			case [`long] {
				send Output
					"	long [FD.id];
			}
			case [`string] {
				send Output
					"	char *[FD.id];
					"	void set_[FD.id]( PacketWriter *writer, const char *d );
			}
		}

		send Output
			"	static [Packet->Id] *open( PacketWriter *writer );
			"	static const unsigned short ID = [Packet->AppID * 1000 + Packet->NumID];
			"};
			"
	}

	send Output
		~#endif
		eos

	writeOutput( Output->tree, 'packet_gen.h' )
}

void packetRecvDecls( Thread: thread )
{
	for Packet: packet in Thread->RecvsPktList {
		send Output
			"	virtual void recv[Packet->Id]( SelectFd *fd, [Packet->Id] *pkt ) = 0;
	}
}

void packetReceives( Thread: thread )
{
	send Output
		"void [Thread->Id]Gen::dispatchPacket( SelectFd *fd )
		"{
		"		switch ( fd->recv.head.msgId ) {

	for Packet: packet in Thread->RecvsPktList {
		send Output
			"			case (int) [Packet->Id]::ID: {
			"			[Packet->Id] *pkt = ([Packet->Id]*) pktFind( &fd->recv.buf, sizeof(PacketBlockHeader) );
		for FD: pkt_field_def in Packet->PacketDef {
			switch FD.pkt_field_type
			case [`string] {
				send Output
					"			pkt->[FD.id] = pktFind( &fd->recv.buf, (long)pkt->[FD.id] );
			}
		}
		send Output
			"				recv[Packet->Id]( fd, pkt );
			"				break;
			"			}
	}

	send Output
		"		}
		"}
		"
		"
}


void generatePacketCode( P: program )
{
	Output = new parser<out_c::out_c>()

	send Output
		~/*
		~ * packet_gen.cc
		~ */
		~
		~#include "itq_gen.h"
		~#include "packet_gen.h"
		~#include <genf/thread.h>
		~

	for Packet: packet in PacketMap {
		for FD: pkt_field_def in Packet->PacketDef {
			switch FD.pkt_field_type
			case [`string] {
				send Output
					"void [Packet->Id]::set_[FD.id]( PacketWriter *writer, const char *src )
					"{
					"	int length = strlen( src ) + 1;
					"	long offset = 0;
					"	char *dest = writer->allocBytes( length, offset );
					"	(([Packet->Id]*)writer->content)->[FD.id] = (char*)offset;
					"	memcpy( dest, src, length );
					"}
					"
			}
		}

		send Output
			"[Packet->Id] *[Packet->Id]::open( PacketWriter *writer )
			"{
			"	return ([Packet->Id]*) GenF::Packet::open( writer,
			"		[Packet->Id]::ID, sizeof([Packet->Id]) );
			"}
			"

	}

	send Output [] eos

	writeOutput( Output->tree, 'packet_gen.cc' )
}
