void generateJava( P: program )
{
	Output = new parser<out_c::out_c>()

	send Output
		~/*
		~ * BrokerGen.java
		~ */
		~
		~package net.colm.monitor;
		~
		~import java.io.InputStream;
		~import java.io.OutputStream;
		~import java.io.UnsupportedEncodingException;
		~import java.nio.ByteBuffer;
		~import java.nio.ByteOrder;
		~import java.io.IOException;
		~import java.util.Iterator;
		~import java.util.Arrays;
		~
		~abstract public class BrokerGen
		~	extends BrokerBase
		~{

	for Packet: packet in PacketMap {
		send Output
			"	void send[Packet->Id]( "

		Comma: str = ""
		for FD: record_field_def in Packet->PacketDef {
			switch FD.record_field_type
			case [`bool] {
				send Output "[Comma]boolean [FD.id]"
			}
			case [`int] {
				send Output "[Comma]int [FD.id]"
			}
			case [`uint] {
				send Output "[Comma]int [FD.id]"
			}
			case [`long] {
				send Output "[Comma]long [FD.id]"
			}
			case [`ulong] {
				send Output "[Comma]long [FD.id]"
			}
			case [`string] {
				send Output "[Comma]String [FD.id]"
			}
			case [L: list_type] { }
			case [`char `( N: number `)] { }
			Comma = ", "
		}
			
		send Output " )
			"	{
			"		byte\[\] b = new byte\[[16 + Packet->Size]\];
			"		ByteBuffer bbb = ByteBuffer.wrap(b);
			"		bbb.order( ByteOrder.LITTLE_ENDIAN );
			"
			"		/* Next block length, id, total length, first length */
			"		bbb.putInt( 0,  0 );
			"		bbb.putInt( OFF_FIRST_LEN, [16 + Packet->Size] );
			"		bbb.putInt( OFF_TOTAL_LEN, [16 + Packet->Size] );
			"		bbb.putInt( OFF_MSG_ID,    [Packet->Id].ID );
			"

		for FD: record_field_def in Packet->PacketDef {
			switch FD.record_field_type
			case [`bool] {
				send Output "		bbb.putByte( [16 + FD.Offset], [FD.id] );
			}
			case [`int] {
				send Output "		bbb.putInt( [16 + FD.Offset], [FD.id] );
			}
			case [`uint] {
				send Output "		bbb.putInt( [16 + FD.Offset], [FD.id] );
			}
			case [`long] {
				send Output "		bbb.putLong( [16 + FD.Offset], [FD.id] );
			}
			case [`ulong] {
				send Output "		bbb.putLong( [16 + FD.Offset], [FD.id] );
			}
			case [`string] {
			}
			case [L: list_type] { }
			case [`char `( N: number `)] { }
		}

		send Output
			"		OutputStream output = null;
			"		try {
			"			output = socket.getOutputStream();
			"			output.write( b );
			"		}
			"		catch ( IOException e ) {
			"			e.printStackTrace();
			"		}
			"	}
	}

	for Struct: _struct in StructMap {
		send Output
			"public static class [Struct->Id]
			"{
			"	public [Struct->Id]( Packet packet, int offset )
			"	{
			"		this.packet = packet;
			"		this.offset = offset;
			"		if ( offset != 0 )
			"			load();
			"	}

		for FD: struct_field_def in Struct->StructDef {
			switch FD.struct_field_type
			case [`bool] {
				send Output
					"	public byte [FD.id];
			}
			case [`int] {
				send Output
					"	public int [FD.id];
			}
			case [`uint] {
				send Output
					"	public int [FD.id];
			}
			case [`long] {
				send Output
					"	public long [FD.id];
			}
			case [`ulong] {
				send Output
					"	public long [FD.id];
			}
			case [`string] {
				send Output
					"	public String [FD.id];
			}
			case [`char `( N: number `)] {
				send Output
					"	public byte\[\] [FD.id];
			}
		}

		send Output
			"	int next;
			"	Packet packet;
			"	int offset;

		send Output
			"public void advance()
			"{
			"	offset = next;
			"	if ( offset != 0 )
			"		load();
			"}
			"
			"public boolean valid()
			"{
			"	return offset != 0;
			"}
			"

		send Output
			"void load()
			"{
			"	int len;
			"	int stroff;
			"	PacketPos strPos;
			"	PacketPos recordPos = pktFind( this.packet, this.offset );
			"	

		for FD: struct_field_def in Struct->StructDef {
			switch FD.struct_field_type
			case [`bool] {
				send Output
					"	this.[FD.id] = recordPos.element\[[FD.Offset]\];
			}
			case [`int] {
				send Output
					"	this.[FD.id] = recordPos.block.getInt( recordPos.offset + [FD.Offset] );
			}
			case [`uint] {
				send Output
					"	this.[FD.id] = recordPos.block.getInt( recordPos.offset + [FD.Offset] );
			}
			case [`long] {
				send Output
					"	this.[FD.id] = recordPos.block.getLong( recordPos.offset + [FD.Offset] );
			}
			case [`ulong] {
				send Output
					"	this.[FD.id] = recordPos.block.getLong( recordPos.offset + [FD.Offset] );
			}
			case [`string] {
				send Output
					"	stroff = recordPos.block.getInt( recordPos.offset + [FD.Offset] );
					"	strPos = pktFind( packet, stroff );
					"	len = packetStrLen( strPos );
					"	try {
					"		this.[FD.id] = new String( strPos.element,
					"				strPos.offset, len, \"ASCII\" );
					"	}
					"	catch ( UnsupportedEncodingException e )
					"	{
					"		e.printStackTrace();
					"	}
			}
			case [`char `( N: number `)] {
				send Output
					"	this.[FD.id] = Arrays.copyOfRange( recordPos.element,
					"		recordPos.offset + [FD.Offset],
					"		recordPos.offset + [FD.Offset] + [N] );
			}
		}

		send Output
			"	this.next = recordPos.block.getInt( recordPos.offset + [Struct->NextOffset] );
			"}
			"

		send Output
			"}
	}

	for Packet: packet in PacketMap {
		send Output
			"public static class [Packet->Id]
			"{

		for FD: record_field_def in Packet->PacketDef {
			switch FD.record_field_type
			case [`bool] {
				send Output
					"	public boolean [FD.id];
			}
			case [`int] {
				send Output
					"	public int [FD.id];
			}
			case [`uint] {
				send Output
					"	public int [FD.id];
			}
			case [`long] {
				send Output
					"	public long [FD.id];
			}
			case [`ulong] {
				send Output
					"	public long [FD.id];
			}
			case [`string] {
				send Output
					"	public String [FD.id];
			}
			case [L: list_type] {
				send Output
					"	public int [FD.id];
			}
			case [`char `( N: number `)] {
				send Output
					"	public byte\[\] [FD.id];
			}
		}

		send Output
			"	public Packet packet;

		send Output
			"void read( Packet packet, int offset )
			"{
			"	int len;
			"	int stroff;
			"	PacketPos strPos;
			"	PacketPos recordPos = pktFind( packet, offset );
			"	this.packet = packet;
			"	

		for FD: record_field_def in Packet->PacketDef {
			switch FD.record_field_type
			case [`bool] {
				send Output
					"	this.[FD.id] = recordPos.block.getByte( recordPos.offset + [FD.Offset] );
			}
			case [`int] {
				send Output
					"	this.[FD.id] = recordPos.block.getInt( recordPos.offset + [FD.Offset] );
			}
			case [`uint] {
				send Output
					"	this.[FD.id] = recordPos.block.getInt( recordPos.offset + [FD.Offset] );
			}
			case [`long] {
				send Output
					"	this.[FD.id] = recordPos.block.getLong( recordPos.offset + [FD.Offset] );
			}
			case [`ulong] {
				send Output
					"	this.[FD.id] = recordPos.block.getLong( recordPos.offset + [FD.Offset] );
			}
			case [`string] {
				send Output
					"	stroff = recordPos.block.getInt( recordPos.offset + [FD.Offset] );
					"	strPos = pktFind( packet, stroff );
					"	len = packetStrLen( strPos );
					"	try {
					"		this.[FD.id] = new String( strPos.element, strPos.offset, len, \"ASCII\" );
					"	}
					"	catch ( UnsupportedEncodingException e )
					"	{
					"		e.printStackTrace();
					"	}
			}
			case [`char `( N: number `)] {
				send Output
					"	this.[FD.id] = Arrays.copyOfRange( recordPos.element,
					"		recordPos.offset + [FD.Offset],
					"		recordPos.offset + [FD.Offset] + [N] );
			}
			case [L: list_type] {
				send Output
					"	this.[FD.id] = recordPos.block.getInt( recordPos.offset + [FD.Offset] );
			}
		}

		send Output
			"}

		send Output
			"	static final int ID = [Packet->AppID * 1000 + Packet->NumID];
			"}
	}

	
	for Struct: _struct in StructMap {

	}

	for Packet: packet in PacketMap {
	}

	send Output
		~	void dispatch( Packet packet )
		~	{
		~		// Log.i( LOG_TAG, "dispatching packet parsing packet" );
		~		// System.out.println( packet.totalLen );
		~
		~		switch ( packet.msgId ) {

	for Packet: packet in PacketMap {
		send Output
			"		case [Packet->Id].ID: {
			"			[Packet->Id] p = new [Packet->Id]();
			"			p.read( packet, 16 );
			
		if ( Packet->Id == "MonitorDisp" ) {
			send Output
				"			callback.received( p.content );
		}

		if ( Packet->Id == "QuoteList" ) {
			send Output
				"			callback.received( p );
		}

		send Output
			"			break;
			"		}
	}

	send Output
		~		}
		~	}
		~}

	send Output [] eos

	writeOutput( Output->tree, 'BrokerGen.java' )
}

