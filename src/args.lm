global OptAutomake: bool = false
global OptKernf: bool = false
global OptHelp: bool = false
global OptInputFn: str
global OptInc: list<str> = new list<str>()

namespace args

	lex
		literal `-
		token file /^('-'|0)(^0)*/
	end

	lex
		token single /[h]/
		token single_arg /[I]/
		token dash /'-'/

		literal `help `automake `kernf
	end

	def long
		[`automake]
	|	[`kernf]
	|	[`help]

	token word /(^0)+/
	token zero /0/

	def item
		[`- single* zero]
	|	[`- dash long zero]
	|	[`- single_arg word zero]
	|	[file zero]

	def args 
		[item*]
end

void parseArgs()
{
	ArgParser: parser<args::args> = new parser<args::args>()

	# Parse the args and extract the result into Args.
	for A: list_el<str> in argv
		send ArgParser [A->value '\0']
	Args: args::args = ArgParser->finish()

	if !Args {
		send stderr "genf: arg parsing failed
		exit(1)
	}

	# Process the args.
	for Item: args::item in Args {
		switch Item
		case ["--automake" args::zero] {
			OptAutomake = true
		}
		case ["--help" args::zero] {
			OptHelp = true
		}
		case ["--kernf" args::zero] {
			OptKernf = true
		}
		case ["-I" W: word zero] {
			OptInc->push_tail( $W )
		}
		case [file zero] {
			OptInputFn = $Item.file
		}
	}
}
