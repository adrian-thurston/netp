
void generateItqHeader( P: program )
{
	Output = new parser<out_c::out_c>()

	send Output
		~/*
		~ * itq_gen.h
		~ */
		~
		~#ifndef __ITQ_GEN_H
		~#define __ITQ_GEN_H
		~
		~struct ItHeader;
		~struct ItWriter;
		~struct ItQueue;
		~
		~#include "itq.h"
		~#include <stdlib.h>
		~
		~void *itqOpen( ItWriter *writer, int ID, size_t SZ );
		~void *itqRead( ItQueue *queue, ItHeader *header, size_t SZ );

	# ID 1 is reserved f
	ID: int = 2

	for Message: message in MessageMap {
		send Output
			"struct [Message->Id]
			"{

		for FD: msg_field_def in Message->MessageDef {
			switch FD.msg_field_type
			case [`bool] {
				send Output
					"	bool [FD.id];
			}
			case [`long] {
				send Output
					"	long [FD.id];
			}
			case [`string] {
				send Output
					"	const char *[FD.id];
					"	void set_[FD.id]( ItWriter *writer, const char *d );
			}
			case [Id: id `*] {
				send Output
					"	[Id] *[FD.id];
			}
		}

		send Output
			"	static [Message->Id] *open( ItWriter *writer )
			"		{ return ([Message->Id]*)itqOpen( writer, [Message->Id]::ID, sizeof([Message->Id]) ); }
			"
			"	static [Message->Id] *read( ItQueue *queue, ItHeader *header )
			"		{ return ([Message->Id]*)itqRead( queue, header, sizeof([Message->Id]) ); }
			"
			"
			"	static const unsigned short ID = [ID];
			"};
			"

		ID = ID + 1
	}

	# Starting point defined in thread.h
	Bit: int = 16
	for D: debug_def in P {
		send Output
			"#define DBG_[D.id] [sprintf("0x%08x", Bit)] 
		Bit = Bit * 2
	}

	send Output
		~#endif
		eos

	writeOutput( Output->tree, 'itq_gen.h' )
}

void generateItqCode( P: program )
{
	Output = new parser<out_c::out_c>()

	send Output
		~/*
		~ * itq_gen.cc
		~ */
		~
		~#include "itq_gen.h"
		~#include <genf/thread.h>
		~

	for MD: message_def in P {
		for FD: msg_field_def in MD {
			switch FD.msg_field_type
			case [`string] {
				send Output
					"void [MD.id]::set_[FD.id]( ItWriter *writer, const char *src )
					"{
					"	int length = strlen( src ) + 1;
					"	char *dest = (char*) writer->queue->allocBytes( writer, length );
					"	(([MD.id]*)writer->contents)->[FD.id] = dest;
					"	memcpy( dest, src, length );
					"}
					"
			}

		}
	}

	send Output [] eos

	writeOutput( Output->tree, 'itq_gen.cc' )
}
