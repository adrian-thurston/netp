
void generateItqHeader( P: program )
{
	Output = new parser<out_c::out_c>()

	~/*
	~ * itq_gen.h
	~ */
	~
	~#ifndef __ITQ_GEN_H
	~#define __ITQ_GEN_H
	~
	~struct ItHeader;
	~struct ItWriter;
	~struct ItQueue;
	~
	~#include "itq.h"
	~#include <stdlib.h>
	~
	~void *itqOpen( ItWriter *writer, int ID, size_t SZ );
	~void *itqRead( ItQueue *queue, ItHeader *header, size_t SZ );

	"namespace Message {
	"

	# ID 1 is reserved f
	ID = 2

	for Message: message in MessageMap {
		"struct [Message->Id]
		"{

		for FD: msg_field_def in Message->MessageDef {
			switch FD.msg_field_type
			case [`bool] {
				"	bool [FD.id];
			}
			case [`long] {
				"	long [FD.id];
			}
			case [`string] {
				"	const char *[FD.id];
				"	void set_[FD.id]( ItWriter *writer, const char *d );
			}
			case [Id: id `*] {
				"	[Id] *[FD.id];
			}
		}

		"	static [Message->Id] *open( ItWriter *writer )
		"	{
		"		return ([Message->Id]*)itqOpen( writer,
		"				[Message->Id]::ID, sizeof([Message->Id]) );
		"	}
		"
		"	static [Message->Id] *read( ItQueue *queue, ItHeader *header )
		"	{
		"		return ([Message->Id]*)itqRead( queue,
		"				header, sizeof([Message->Id]) );
		"	}
		"
		"	static const unsigned short ID = [ID];
		"};
		"

		ID = ID + 1
	}

	"}
	"

	"namespace Writer {
	"

	# ID 1 is reserved f
	ID: int = 2

	for Message: message in MessageMap {
		"struct [Message->Id]
		"{
		"	struct Cons
		"	{
		"		Cons( ItWriter *writer ) : writer(writer) {}
		"		ItWriter *writer;
		"	};
		"
		"	[Message->Id]( const Cons &cons ) 
		"		: writer(cons.writer)
		"	{
		"		msg = Message::[Message->Id]::open( writer );
		"	}
		"
		"	ItWriter *writer;
		"	Message::[Message->Id] *msg;
		"

		for FD: msg_field_def in Message->MessageDef {
			switch FD.msg_field_type
			case [`bool] {
				"	void set_[FD.id]( bool _b ) { msg->[FD.id] = b; }
			}
			case [`long] {
				"	void set_[FD.id]( long _l ) { msg->[FD.id] = l; }
			}
			case [`string] {
				"	void set_[FD.id]( const char *d ) { msg->set_[FD.id]( writer, d ); }
			}
			case [Id: id `*] {
				"	void set_[FD.id]( [Id] *p ) { msg->[FD.id] = p; }
			}
		}

		"	void send( bool signal = false );
		"};
		"

		ID = ID + 1
	}

	"}
	"

	# Starting point defined in thread.h
	Bit: int = 16
	for D: debug_def in P {
		"#define DBG_[D.id] [sprintf("0x%08x", Bit)] 
		Bit = Bit * 2
	}

	~#endif
	eos

	writeOutput( Output->tree, 'itq_gen.h' )
}

void generateItqCode( P: program )
{
	Output = new parser<out_c::out_c>()

	~/*
	~ * itq_gen.cc
	~ */
	~
	~#include "itq_gen.h"
	~#include <genf/thread.h>
	~

	for Message: message in MessageMap {
		"void Writer::[Message->Id]::send( bool signal )
		"	{ writer->queue->send( writer, signal ); }
	}

	for MD: message_def in P {
		for FD: msg_field_def in MD {
			switch FD.msg_field_type
			case [`string] {
				"void Message::[MD.id]::set_[FD.id]( ItWriter *writer, const char *src )
				"{
				"	int length = strlen( src ) + 1;
				"	char *dest = (char*) writer->queue->allocBytes( writer, length );
				"	(([MD.id]*)writer->contents)->[FD.id] = dest;
				"	memcpy( dest, src, length );
				"}
				"
			}
		}
	}

	[] eos

	writeOutput( Output->tree, 'itq_gen.cc' )
}
