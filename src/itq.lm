
void generateItqHeader( P: program )
{
	Output = new parser<out_c::out_c>()

	send Output
		~/*
		~ * itq_gen.h
		~ */
		~
		~#ifndef __ITQ_GEN_H
		~#define __ITQ_GEN_H
		~
		~struct ItHeader;
		~struct ItWriter;
		~struct ItQueue;
		~
		~#include "itq.h"
		~

	ID: int = 1

	for Message: message in MessageMap {
		send Output
			"struct [Message->Id]
			"{

		for FD: msg_field_def in Message->MessageDef {
			switch FD.msg_field_type
			case [`bool] {
				send Output
					"	bool [FD.id];
			}
			case [`long] {
				send Output
					"	long [FD.id];
			}
			case [`string] {
				send Output
					"	const char *[FD.id];
					"	void set_[FD.id]( ItWriter *writer, const char *d );
			}
			case [Id: id `*] {
				send Output
					"	[Id] *[FD.id];
			}
		}

		send Output
			"	static [Message->Id] *open( ItWriter *writer );
			"	static [Message->Id] *read( ItQueue *queue, ItHeader *header );
			"	static const unsigned short ID = [ID];
			"};
			"

		ID = ID + 1
	}

	Bit: int = 1
	for D: debug_def in P {
		send Output
			"#define DBG_[D.id] [sprintf("0x%08x", Bit)] 
		Bit = Bit * 2
	}

	send Output
		~#endif
		eos

	writeOutput( Output->tree, 'itq_gen.h' )
}

void generateItqCode( P: program )
{
	Output = new parser<out_c::out_c>()

	send Output
		~/*
		~ * itq_gen.cc
		~ */
		~
		~#include "itq_gen.h"
		~#include <genf/thread.h>
		~

	for MD: message_def in P {
		for FD: msg_field_def in MD {
			switch FD.msg_field_type
			case [`string] {
				send Output
					"void [MD.id]::set_[FD.id]( ItWriter *writer, const char *src )
					"{
					"	int length = strlen( src ) + 1;
					"	char *dest = (char*) writer->queue->allocBytes( writer, length );
					"	(([MD.id]*)writer->contents)->[FD.id] = dest;
					"	memcpy( dest, src, length );
					"}
			}
		}

		send Output
			"[MD.id] *[MD.id]::open( ItWriter *writer )
			"{
			"	writer->mlen = 0;
			"
			"	/* Place the header. */
			"	ItHeader *header = (ItHeader*) writer->queue->allocBytes(
			"			writer, sizeof(ItHeader) );
			"	
			"	header->msgId = [MD.id]::ID;
			"	header->writerId = writer->id;
			"
			"	/* Length will get recorded on message send, after fields are populated. */
			"	header->length = 0; 
			"
			"	/* Place the struct. */
			"	[MD.id] *msg = ([MD.id]*) writer->queue->allocBytes(
			"			writer, sizeof([MD.id]) );
			"
			"	writer->toSend = header;
			"	writer->contents = msg;
			"
			"	return msg;
			"}
			"

		send Output
			"[MD.id] *[MD.id]::read( ItQueue *queue, ItHeader *header )
			"{
			"	ItWriter *writer = queue->writerVect\[header->writerId\];
			"	ItBlock *head = writer->head;
			"	int offset = writer->hoff;
			"
			"	if ( offset + sizeof(ItHeader) > head->size ) {
			"		head = head->next;
			"		offset = 0;
			"	}
			"	offset += sizeof( ItHeader );
			"
			"	if ( offset + sizeof([MD.id]) > head->size ) {
			"		head = head->next;
			"		offset = 0;
			"	}
			"	[MD.id] *msg = ([MD.id]*)(head->data + offset);
			"	offset += sizeof( [MD.id] );
			"
			"	return msg;
			"}
			"
	}

	send Output [] eos

	writeOutput( Output->tree, 'itq_gen.cc' )
}
