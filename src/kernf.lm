void module_c()
{
	Output = cons parser<out_c::out_c>[]

	send Output
		"#include <linux/module.h>
		"#include <linux/kernel.h>
		"#include <linux/init.h>
		"
		"MODULE_LICENSE(\"Colm Networks Proprietary\");
		"MODULE_AUTHOR(\"Colm Networks\");
		"MODULE_DESCRIPTION(\"[ModuleName]\");
		"
		"static int __init [ModuleName]_init(void)
		"{
		"	printk( KERN_INFO \"[ModuleName] init\\n\" );
		"	return 0;
		"}
		"
		"static void __exit [ModuleName]_exit(void)
		"{
		"	printk( KERN_INFO \"[ModuleName] exit\\n\" );
		"}
		"
		"module_init( [ModuleName]_init );
		"module_exit( [ModuleName]_exit );

	send Output [] eos
	writeOutput( Output.tree 'module.c' )
}

void makefile()
{
	Output = cons parser<out_c::out_c>[]

	send Output
		"obj-m := [ModuleName].o
		"[ModuleName]-objs := module.o

	send Output [] eos
	writeOutput( Output.tree 'Kbuild' )
}

void generateKernf( P: program )
{
	if !ModuleName {
		send stderr "module name not specified in input
		exit( 1 )
	}

	module_c()
	makefile()
}
