context attr
	Name: str
	Num: int
	Show: bool
	Store: bool
end

context kobj
	TypeName: str
	Attrs: list<attr>
end

void attributeStruct( Kobj: kobj Attr: attr )
{
	send Output
		"struct [ModuleName]_attribute [Attr->Name]_attribute =
		"	{ { .name = \"[Attr->Name]\", .mode = 0666 }, [Attr->Num] };
		"
}

void attributeDecl( Kobj: kobj Attr: attr )
{

	if ( Attr->Show ) {
		send Output
			"static ssize_t [Kobj->TypeName]_[Attr->Name]_show(
			"		struct [Kobj->TypeName] *obj, char *buf );
			"
	}

	if ( Attr->Store ) {
		send Output
			"static ssize_t [Kobj->TypeName]_[Attr->Name]_store(
			"		struct [Kobj->TypeName] *obj, const char *buf, size_t count );
			"
	}
}

void attribute_h( P: program )
{
	Output = new parser<out_c::out_c>

	send Output
		"#ifndef __ATTRIBUTE_H
		"#define __ATTRIBUTE_H

	for Kobj: kobj in deref KobjList {
		send Output
			"struct [Kobj->TypeName];
			"static int create_[Kobj->TypeName]( struct [Kobj->TypeName] **ret_obj,
			"		const char *name, struct kobject *parent );
			"

		for Attr: attr in deref Kobj->Attrs
			attributeDecl( Kobj Attr )
	}

	send Output
		"#endif

	send Output [] eos
	writeOutput( Output->tree 'attribute.h' )
}

void module_c( P: program )
{
	Output = new parser<out_c::out_c>

	send Output
		"#include <linux/kernel.h>
		"#include <linux/module.h>
		"#include <linux/init.h>
		"#include <linux/kobject.h>
		"#include <linux/slab.h>
		"
		"/* Lie to make it compile. */
		"MODULE_LICENSE( \"GPL\" );
		"MODULE_AUTHOR( \"Colm Networks\" );
		"MODULE_DESCRIPTION( \"[ModuleName]\" );
		"
		"#include \"attribute.h\"

	send Output
		"
		"static struct [ModuleName] *root_obj;
		"
		"struct [ModuleName]_attribute
		"{
		"	struct attribute attr;
		"	unsigned int num;
		"};
		"

	for Kobj: kobj in deref KobjList {
		for Attr: attr in deref Kobj->Attrs
			attributeStruct( Kobj Attr )
	}

	send Output
		"#include \"attribute.c\"

	for Kobj: kobj in deref KobjList {
		send Output
			"static struct attribute *[Kobj->TypeName]_attrs\[\] = {

		for Attr: attr in deref Kobj->Attrs {
			send Output
				"	&[Attr->Name]_attribute.attr,
		}

		send Output
			"	NULL,
			"};

		send Output
			"static struct attribute_group [Kobj->TypeName]_attr_group = {
			"	.attrs = [Kobj->TypeName]_attrs,
			"};
			"
	}

	for Kobj: kobj in deref KobjList {
		send Output
			"static void [Kobj->TypeName]_release( struct kobject *kobj )
			"{
			"	// kfree(kobj);
			"}
			"
	}

	send Output
		"static ssize_t [ModuleName]_attr_show( struct kobject *kobj, 
		"		struct attribute *attr, char *buf)
		"{
		"	struct [ModuleName]_attribute *kattr;
		"	ssize_t ret = -EIO;
		"
		"	kattr = container_of( attr, struct [ModuleName]_attribute, attr );
		"	switch ( kattr->num ) {
		
	for Kobj: kobj in deref KobjList {
		for Attr: attr in deref Kobj->Attrs {
			if ( Attr->Show ) {
				send Output
					"case [Attr->Num]: {
					"	struct [Kobj->TypeName] *obj = container_of( 
					"			kobj, struct [Kobj->TypeName], kobj );
					"	ret = [Kobj->TypeName]_[Attr->Name]_show( obj, buf );
					"	break;
					"}
			}
		}
	}
		
	send Output
		"	}
		"	return ret;
		"}
		"

	send Output
		"static ssize_t [ModuleName]_attr_store( struct kobject *kobj,
		"		struct attribute *attr, const char *buf, size_t count )
		"{
		"	struct [ModuleName]_attribute *kattr;
		"	ssize_t ret = -EIO;
		" 
		"	kattr = container_of( attr, struct [ModuleName]_attribute, attr );
		"	switch ( kattr->num ) {

	for Kobj: kobj in deref KobjList {
		for Attr: attr in deref Kobj->Attrs {
			if ( Attr->Store ) {
				send Output
					"case [Attr->Num]: {
					"	struct [Kobj->TypeName] *obj = container_of( 
					"			kobj, struct [Kobj->TypeName], kobj );
					"	ret = [Kobj->TypeName]_[Attr->Name]_store( obj, buf, count );
					"	break;
					"}
			}
		}
	}

	send Output
		"	}
		"	return ret;
		"}
		"

	send Output
		"const struct sysfs_ops [ModuleName]_sysfs_ops = {
		"	.show   = [ModuleName]_attr_show,
		"	.store  = [ModuleName]_attr_store,
		"};
		"
		"EXPORT_SYMBOL_GPL([ModuleName]_sysfs_ops);
		"

	for Kobj: kobj in deref KobjList {
		send Output
			"static struct kobj_type [Kobj->TypeName]_ktype = {
			"	.release        = [Kobj->TypeName]_release,
			"	.sysfs_ops      = &[ModuleName]_sysfs_ops,
			"};
			"
	}

	for Kobj: kobj in deref KobjList {
		send Output
			"static int create_[Kobj->TypeName]( struct [Kobj->TypeName] **ret_obj,
			"		const char *name, struct kobject *parent )
			"{
			"	int retval;
			"	struct [Kobj->TypeName] *obj;
			"
			"	obj = kzalloc( sizeof(struct [Kobj->TypeName]), GFP_KERNEL );
			"	if ( ! obj )
			"		return -ENOMEM;
			"
			"	kobject_init( &obj->kobj, &[Kobj->TypeName]_ktype );
			" 	kobject_add( &obj->kobj, parent, name != NULL ? name : \"[Kobj->TypeName]\" );
	#		" 	if ( retval ) {
	#		"		printk(KERN_WARNING "%s: kobject_add error: %d\n", __func__, retval);
	#		"		kobject_put(kobj);
	#		"		kobj = NULL;
	#		"	}
	#		"	return kobj;
			"
			"	retval = sysfs_create_group( &obj->kobj, &[Kobj->TypeName]_attr_group );
			"	if ( retval ) {
			"		kobject_put( &obj->kobj );
			"		return retval;
			"	}
			"
			"	*ret_obj = obj;
			"	return 0;
			"}
			"
	}

	send Output
		"static int __init [ModuleName]_gen_init( void )
		"{
		"	int retval;
		"	printk( KERN_INFO \"[ModuleName] init\\n\" );
		"
		"	retval = create_[ModuleName]( &root_obj, NULL, NULL );
		"	if ( retval )
		"		return retval;
		"
		"	retval = [ModuleName]_init();
		"	if ( retval ) {
		"		kobject_put( &root_obj->kobj );
		"		return retval;
		"	}
		"
		"	return 0;
		"}
		"
		"static void __exit [ModuleName]_gen_exit(void)
		"{
		"	printk( KERN_INFO \"[ModuleName] exit\\n\" );
		"
		"	[ModuleName]_exit();
		"
		"	kobject_put( &root_obj->kobj );
		"}
		"
		"module_init( [ModuleName]_gen_init );
		"module_exit( [ModuleName]_gen_exit );

	send Output [] eos
	writeOutput( Output->tree 'module.c' )
}

void kbuild( P: program )
{
	Output = new parser<out_c::out_c>

	send Output
		"obj-m := [ModuleName].o
		"[ModuleName]-objs := module.o
		"
		"module.o: attribute.h attribute.c

	send Output [] eos
	writeOutput( Output->tree 'Kbuild' )
}

void generateKernf( P: program )
{
	if !ModuleName {
		send stderr "module name not specified in input
		exit( 1 )
	}

	module_c( P )
	attribute_h( P )
	kbuild( P )
}
