def thread
	Id: str
	Lower: str
	Starts: thread_list
	StartedBy: ptr<thread>
	[]

alias thread_map
	map<str ptr<thread>>

alias thread_list
	list<ptr<thread>>

global ThreadMap: thread_map = cons thread_map[]

ptr<thread> findThread( Id: id )
{
	Thread: ptr<thread> = ThreadMap.find( $Id )
	if ! Thread {
		send stderr "inp:[Id.line]: failed to locate thread [Id]
		exit( 1 )
	}
}

ptr<thread> consThread( ThreadDef: thread_def )
{
	Thread: ptr<thread> = new cons thread( $ThreadDef.id )[]
	Thread->Lower = tolower( Thread->Id )
	Thread->Starts = cons thread_list[]
	return Thread
}

void generateThreadHeader( Thread: ptr<thread> )
{
	Output = cons parser<out_c::out_c>[]

	send Output
		"/*
		" * [Thread->Lower]_gen.h
		" */
		"

	send Output
		~#include "thread.h"
		~

	send Output
		"struct [Thread->Id]Gen
		"	: public Thread
		"{
		"	void init() { }
		"	void create();
		"	int start();
		"	virtual int main() {}
		"};

	send Output [] eos
	writeOutput( Output.tree "[Thread->Lower]_gen.h" )
}

void createThread( Thread: ptr<thread> )
{
	send Output
		"void *[Thread->Lower]_start_routine( void *arg )
		"{
		"	[Thread->Id]Gen *thread = ([Thread->Id]Gen*)arg;
		"	return (void*)thread->start();
		"}
		"

	send Output
		"void [Thread->Id]Gen::create()
		"{
		"	pthread_create( &pthread, 0, [Thread->Lower]_start_routine, this );
		"}
		"
}

void generateThreadCode( Thread: ptr<thread> )
{
	Output = cons parser<out_c::out_c>[]

	send Output
		"/*
		" * [Thread->Lower]_gen.cc
		" */
		"

	send Output
		"#include \"[Thread->Lower].h\"
		"

	createThread( Thread )

	send Output
		"int [Thread->Id]Gen::start()
		"{
		"	return main();
		"};
		"

	send Output [] eos
	writeOutput( Output.tree "[Thread->Lower]_gen.cc" )
}

