def thread
	Id: str
	Lower: str
	Starts: thread_list
	StartedBy: ptr<thread>
	[]

alias thread_map
	map<str ptr<thread>>

alias thread_list
	list<ptr<thread>>

global ThreadMap: thread_map = cons thread_map[]

ptr<thread> findThread( Id: id )
{
	Thread: ptr<thread> = ThreadMap.find( $Id )
	if ! Thread {
		send stderr "inp:[Id.line]: failed to locate thread [Id]
		exit( 1 )
	}
	return Thread
}

ptr<thread> consThread( ThreadDef: thread_def )
{
	Thread: ptr<thread> = new cons thread( $ThreadDef.id )[]
	Thread->Lower = tolower( Thread->Id )
	Thread->Starts = cons thread_list[]
	return Thread
}

void generateThreadHeader( Thread: ptr<thread> )
{
	Output = cons parser<out_c::out_c>[]

	send Output
		"/*
		" * [Thread->Lower]_gen.h
		" */
		"

	send Output
		~#include "thread.h"
		~

	childDecls( Thread )

	send Output
		"struct [Thread->Id]Gen
		"	: public Thread
		"{
		"	void init() { }
		"	int start();
		"	void join();
		"	virtual int main() { return 0; }

	createChildDecls( Thread )

	send Output
		"};

	send Output [] eos
	writeOutput( Output.tree "[Thread->Lower]_gen.h" )
}

void createChildDecls( Thread: ptr<thread> )
{
	for Child: ptr<thread> in Thread->Starts {
		send Output
			"	void create( [Child->Id]Thread *child );
	}
}

void createChildDefs( Thread: ptr<thread> )
{
	for Child: ptr<thread> in Thread->Starts {
		send Output
			"void [Thread->Id]Gen::create( [Child->Id]Thread *child )
			"{
			"	childList.append( child );
			"	pthread_create( &child->pthread, 0, thread_start_routine, child );
			"}
			"
	}
}

void joinDef( Thread: ptr<thread> )
{
	send Output
		"void [Thread->Id]Gen::join()
		"{
		"	for ( Thread *child = childList.head;
		"			child != 0; child = child->next )
		"	{
		"		int res = pthread_join( child->pthread, 0 );
		"		if ( res != 0 ) {
		"			log_ERROR( \"join with child failed: strerrno(res)\" );
		"		}
		"	}
		"}
}

void childIncludes( Thread: ptr<thread> )
{
	for Child: ptr<thread> in Thread->Starts {
		send Output
			"#include \"[Child->Lower].h\"
	}
}

void childDecls( Thread: ptr<thread> )
{
	for Child: ptr<thread> in Thread->Starts {
		send Output
			"struct [Child->Id]Gen;
			"struct [Child->Id]Thread;
	}
	send Output "
}

void generateThreadCode( Thread: ptr<thread> )
{
	Output = cons parser<out_c::out_c>[]

	send Output
		"/*
		" * [Thread->Lower]_gen.cc
		" */
		"

	send Output
		"#include \"[Thread->Lower].h\"

	childIncludes( Thread )

	send Output ~

	createChildDefs( Thread )
	joinDef( Thread )

	send Output
		"int [Thread->Id]Gen::start()
		"{
		"	return main();
		"};
		"

	send Output [] eos
	writeOutput( Output.tree "[Thread->Lower]_gen.cc" )
}

