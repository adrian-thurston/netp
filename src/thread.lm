def thread
	Id: str
	Lower: str
	Starts: thread_list
	StartedBy: ptr<thread>
	[]

alias thread_map
	map<str ptr<thread>>

alias thread_list
	list<ptr<thread>>

global ThreadMap: thread_map = cons thread_map[]

ptr<thread> findThread( Id: id )
{
	Thread: ptr<thread> = ThreadMap.find( $Id )
	if ! Thread {
		send stderr "inp:[Id.line]: failed to locate thread [Id]
		exit( 1 )
	}
}

ptr<thread> consThread( ThreadDef: thread_def )
{
	Thread: ptr<thread> = new cons thread( $ThreadDef.id )[]
	Thread->Lower = tolower( Thread->Id )
	Thread->Starts = cons thread_list[]
	return Thread
}

void generateThreadHeader( Thread: ptr<thread> )
{
	Output = cons parser<out_c::out_c>[]

	send Output
		"/*
		" * [Thread->Lower]_gen.h
		" */
		"

	send Output
		~#include "thread.h"
		~

	send Output
		"struct [Thread->Id]Gen
		"	: public Thread
		"{
		"	void init() { }
		"	int run();
		"};

	send Output [] eos
	writeOutput( Output.tree "[Thread->Lower]_gen.h" )
}

void generateThreadCode( Thread: ptr<thread> )
{
	Output = cons parser<out_c::out_c>[]

	send Output
		"/*
		" * [Thread->Lower]_gen.cc
		" */
		"

	send Output
		"#include \"[Thread->Lower].h\"
		"

	send Output
		"int [Thread->Id]Gen::run()
		"{
		"	return 0;
		"};

	send Output [] eos
	writeOutput( Output.tree "[Thread->Lower]_gen.cc" )
}

