include 'grammar.lm'
include 'args.lm'
include 'out_c.lm'
include 'thread.lm'
include 'main.lm'
include 'analysis.lm'
include 'itq.lm'
include 'kernf.lm'

global Output: parser<out_c::out_c>

void writeOutput( Output: out_c::out_c, Fn: str )
{
	S: stream = open( Fn, 'w' )
	send S [Output] eos
}

void generateAutomake( P: program )
{
	print "generate Makefile.am
}

void printHelp()
{
	print "genf \[options\] serv.gf
}

void generateCode( P: program )
{
	generateMainHeader( P )
	generateMainCode( P )

	for Thread: thread in ThreadMap {
		if ( Thread->Id != 'Main' ) {
			generateThreadHeader( Thread )
			generateThreadCode( Thread )
		}
	}

	generateItqHeader( P )
	generateItqCode( P )
}

void addDefaultDefs( P: ref<program> )
{
	require P [DefList: definition*]
	P = cons program [
		"option bool background: -b --background;
		"thread Main;
		DefList
	]
}

void main()
{
	parseArgs()

	if ( OptHelp ) {
		printHelp()
		exit(0)
	}

	if ( !OptInputFn ) {
		send stderr "ERROR: input file not given
		exit( 1 )
	}

	Input: stream = open( OptInputFn, 'r' )
	if ( !Input ) {
		send stderr "ERROR: could not open input file: [$OptInputFn]
		exit( 1 )
	}

	P: program = parse program [Input]
	if ( !P ) {
		send stderr "ERROR: could not parse input: [error]
		exit( 1 )
	}

	addDefaultDefs( P )
	semanticAnalysis( P )

	if ( OptAutomake )
		generateAutomake( P )
	else if ( OptKernf )
		generateKernf( P )
	else
		generateCode( P )
}

main()
