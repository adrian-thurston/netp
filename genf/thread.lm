void sendsToDecls( Thread: thread )
{
	"struct SendsPassthru
	"{
	"	ItWriter *writer;
	"};
	"
	"SendsPassthru *registerSendsPassthru( Thread *recv );
	"

	for Sends: sends in Thread->SendsMap {
		"struct SendsTo[Sends->Receiver->Id]
		"{
		"	ItWriter *writer;

		for Message: message in Sends->MessageList {
			"	Message::[Message->Id] *open[Message->Id]()
			"		{ return Message::[Message->Id]::open( writer ); }
			"	Writer::[Message->Id]::Cons cons[Message->Id]()
			"		{ return Writer::[Message->Id]::Cons( writer ); }
		}

		"	void send( bool signal = false ) { writer->queue->send( writer, signal ); }
		"};
		"
		"SendsTo[Sends->Receiver->Id] *registerSendsTo[Sends->Receiver->Id](
		"		[Sends->Receiver->Id]Thread *recv );
	}
}

void recvDecls( Thread: thread )
{
	for Message: message in Thread->RecvsList {
		"	virtual void recv[Message->Id]( Message::[Message->Id] * ) = 0;
	}
}

void sendsToCode( Thread: thread )
{
	"[Thread->Id]Thread::SendsPassthru *[Thread->Id]Gen::"
			"registerSendsPassthru( Thread *recv )
	"{
	"	SendsPassthru *sendsTo = new SendsPassthru( );
	"	sendsTo->writer = recv->control.registerWriter( this, recv );
	"	return sendsTo;
	"}

	for Sends: sends in Thread->SendsMap {
		"[Thread->Id]Thread::SendsTo[Sends->Receiver->Id] *[Thread->Id]Gen::"
				"registerSendsTo[Sends->Receiver->Id]( "
				"[Sends->Receiver->Id]Thread *recv )
		"{
		"	SendsTo[Sends->Receiver->Id] *sendsTo = 
		"		new SendsTo[Sends->Receiver->Id]( );
		"	sendsTo->writer = recv->control.registerWriter( this, recv );
		"	return sendsTo;
		"}
	}
}

void threadCommonHeader( Thread: thread )
{
	createChildDecls( Thread )
	sendsToDecls( Thread )
	recvDecls( Thread )
	packetRecvDecls( Thread )
	
	"	virtual const char *pkgDataDir();
	"	virtual const char *pkgStateDir();
}


void generateThreadHeader( Thread: thread )
{
	Output = new parser<out_c::out_c>()
	_ = Output

	"/*
	" * [Thread->Lower]_gen.h
	" */
	"
	"#ifndef _[Thread->Upper]_GEN_H
	"#define _[Thread->Upper]_GEN_H
	"

	~#include <genf/thread.h>
	~#include "itq_gen.h"
	~#include "packet_gen.h"
	~#include "genf.h"
	~

	threadForwards( Thread )

	"struct [Thread->Id]Gen
	"	: public Thread
	"{
	"	[Thread->Id]Gen() : Thread( \"[Thread->Lower]\" ) {}
	"
	"	void init() { }
	"	int start();
	"	void join();
	"	virtual int main() { return 0; }
	"	void recvHeader( ItQueue *queue, ItHeader *header );
	"
	"	void recvSingle();
	"	int recvLoop();
	"	bool poll();
	"	void close( SelectFd *fd );
	"

	threadCommonHeader( Thread )

	"};
	"#endif

	send Output [] eos
	writeOutput( Output->tree, "[Thread->Lower]_gen.h" )
}

void createChildDecls( Thread: thread )
{
	for Child: thread in Thread->Starts {
		"	void create( [Child->Id]Thread *child );
	}
	"
}

void createChildDefs( Thread: thread )
{
	for Child: thread in Thread->Starts {
		"void [Thread->Id]Gen::create( [Child->Id]Thread *child )
		"{
		"	childList.append( child );
		"	pthread_create( &child->pthread_parent, 0, genf_thread_start, child );
		"}
		"
	}
}

void joinDef( Thread: thread )
{
	"void [Thread->Id]Gen::join()
	"{
	"	for ( Thread *child = childList.head;
	"			child != 0; child = child->next )
	"	{
	"		int res = pthread_join( child->pthread_parent, 0 );
	"		if ( res != 0 ) {
	"			log_ERROR( \"join with child failed: strerrno(res)\" );
	"		}
	"	}
	"}
}

void threadIncludes( Thread: thread )
{
	for Child: thread in Thread->Starts {
		"#include \"[Child->Lower].h\"
	}

	for Sends: sends in Thread->SendsMap {
		"#include \"[Sends->Receiver->Lower].h\"
	}

	"
}

void threadForwards( Thread: thread )
{
	for Child: thread in Thread->Starts {
		"struct [Child->Id]Gen;
		"struct [Child->Id]Thread;
	}

	for Sends: sends in Thread->SendsMap {
		for Message: message in Sends->MessageList {
			"struct [Message->Id];
			"struct [Sends->Receiver->Id]Thread;
		}
	}

	"
}

void threadRecveives( Thread: thread )
{
	"void [Thread->Id]Gen::recvHeader( ItQueue *queue, ItHeader *header )
	"{
	"	switch ( header->msgId ) {
	"		case Message::PacketPassthru::ID: {
	"			Message::PacketPassthru *msg = Message::PacketPassthru::read( queue, header );
	"			recvPassthru( msg );
	"			break;
	"		}

	for Message: message in Thread->RecvsList {
		"		case Message::[Message->Id]::ID: {
		"			Message::[Message->Id] *msg = Message::[Message->Id]::read( queue, header );
		"			recv[Message->Id]( msg );
		"			break;
		"		}
	}

	"	}
	"}
	"

	"int [Thread->Id]Gen::recvLoop()
	"{
	"	loop = true;
	"	while ( loop ) {
	"		ItHeader *header = control.wait();
	"		recvHeader( &control, header );
	"		control.release( header );
	"	}
	"	return 0;
	"}
	"

	"void [Thread->Id]Gen::recvSingle()
	"{
	"	ItHeader *header = control.wait();
	"	recvHeader( &control, header );
	"	control.release( header );
	"}
	"

	"bool [Thread->Id]Gen::poll()
	"{
	"	if ( control.poll() ) {
	"		ItHeader *header = control.wait();
	"		recvHeader( &control, header );
	"		control.release( header );
	"		return true;
	"	}
	"	return false;
	"}
	"
}

void threadCommonCode( Thread: thread )
{
	"const char *[Thread->Id]Gen::pkgDataDir()
	"	{ return PKGDATADIR; }
	"
	"const char *[Thread->Id]Gen::pkgStateDir()
	"	{ return PKGSTATEDIR; }
}


void generateThreadCode( Thread: thread )
{
	Output = new parser<out_c::out_c>()
	_ = Output

	"/*
	" * [Thread->Lower]_gen.cc
	" */
	"

	"#include \"[Thread->Lower].h\"

	threadIncludes( Thread )
	threadForwards( Thread )

	"

	createChildDefs( Thread )
	joinDef( Thread )
	sendsToCode( Thread )

	packetReceives( Thread )

	threadCommonCode( Thread )

	"int [Thread->Id]Gen::start()
	"{
	"	return main();
	"};
	"

	threadRecveives( Thread )

	send Output [] eos
	writeOutput( Output->tree, "[Thread->Lower]_gen.cc" )
}
