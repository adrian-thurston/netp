namespace packet_name
	lex
		literal `-
		token component /[A-Z][a-z]*/
	end

	def name
		[component*]
	
	str makeLower( Name: str )
	{
		Lower: str = ""
		parse PN: packet_name::name[Name]
		for C: packet_name::component in PN {
			if Lower.length > 0
				Lower = Lower + "-"
			Lower = Lower + tolower($C)
		}
		return Lower
	}
end

void definePack()
{
	~#define _pack( type, dest, off ) \
	~	*((type*)(dest + off))
}

# Authoritatively defined in genf/packet.h
int fieldTypeCode( FD: record_field_def )
{
	Code: int
	switch FD.record_field_type
	case Bool
		Code = 1
	case Int
		Code = 2
	case UnsignedInt
		Code = 3
	case Long
		Code = 4
	case UnsignedLong
		Code = 5
	case String
		Code = 6
	case Char
		Code = 7
	case List
		Code = 8
	return Code
}

str fieldSize( FD: record_field_def )
{
	Size: str
	switch FD.record_field_type
	case Bool
		Size = "sizeof(bool)"
	case Int
		Size = "sizeof(int)"
	case UnsignedInt
		Size = "sizeof(unsigned int)"
	case Long
		Size = "sizeof(long)"
	case UnsignedLong
		Size = "sizeof(unsigned long)"
	case String
		Size = "0"
	case Char
		Size = sprintf( "%d", FD.CharSize )
	case List {
		# If we are describing a list, then the size is the number of fields. They
		# will appear immediately after this node in the field list description.
		El: _struct = findStruct( FD.record_field_type.list_type.id )
		Size = sprintf( "%d", El->NumFields )
	}
	return Size
}

void generatePacketHeader( P: program )
{
	Output = new parser<out_c::out_c>()
	_ = Output

	~/*
	~ * packet_gen.h
	~ */
	~
	~#ifndef __PACKET_GEN_H
	~#define __PACKET_GEN_H
	~
	~#include <sys/types.h>
	~#include <sys/socket.h>
	~#include <errno.h>
	~
	~#include <genf/packet.h>
	~#include <genf/thread.h>
	~
	~struct PacketWriter;
	~struct PacketConnection;
	~struct ItWriter;
	~

	definePack()

	#
	# Packing structs
	#

	~namespace Packer {
	~	struct PacketType;

	for Struct: _struct in StructMap {
		"struct [Struct->Id]
		"{

		for FD: record_field_def in Struct->StructDef {
			switch FD.record_field_type
			case [`bool] {
				"	void set_[FD.id]( long _[FD.id] )
				"		{ _pack( bool, overlay, [FD.Offset] ) = _[FD.id]; }
			}
			case [`int] {
				"	void set_[FD.id]( int _[FD.id] )
				"		{ _pack( int, overlay, [FD.Offset] ) = _[FD.id]; }
			}
			case [`uint] {
				"	void set_[FD.id]( unsigned int _[FD.id] )
				"		{ _pack( unsigned int, overlay, [FD.Offset] ) = _[FD.id]; }
			}
			case [`long] {
				"	void set_[FD.id]( long _[FD.id] )
				"		{ _pack( long, overlay, [FD.Offset] ) = _[FD.id]; }
			}
			case [`ulong] {
				"	void set_[FD.id]( unsigned long _[FD.id] )
				"		{ _pack( unsigned long, overlay, [FD.Offset] ) = _[FD.id]; }
			}
			case [`string] {
				"	void set_[FD.id]( const char *s );
			}
			case [`char `( N: number `)] {
				"	void set_[FD.id]( const char *s )
				"		{ memcpy( overlay + [FD.Offset], s, [FD.CharSize] ); }
			}
		}

		"	char *overlay;
		"	PacketWriter *writer;
		"};
		"
	}

	for Packet: packet in PacketMap {
		"struct [Packet->Id]
		"	: public PacketBase
		"{
		"	[Packet->Id]( PacketConnection *pc  ) : writer( pc ) { open( &writer ); }
		"	[Packet->Id]( ItWriter *itw ) : writer( itw ) { open( &writer ); }
		"	PacketWriter writer;

		for FD: record_field_def in Packet->PacketDef {
			switch FD.record_field_type
			case [`bool] {
				"	void set_[FD.id]( bool _[FD.id] )
				"		{ _pack( bool, overlay, [FD.Offset] ) = _[FD.id]; }
			}
			case [`int] {
				"	void set_[FD.id]( int _[FD.id] )
				"		{ _pack( int, overlay, [FD.Offset] ) = _[FD.id]; }
			}
			case [`uint] {
				"	void set_[FD.id]( unsigned int _[FD.id] )
				"		{ _pack( unsigned int, overlay, [FD.Offset] ) = _[FD.id]; }
			}
			case [`long] {
				"	void set_[FD.id]( long _[FD.id] )
				"		{ _pack( long, overlay, [FD.Offset] ) = _[FD.id]; }
			}
			case [`ulong] {
				"	void set_[FD.id]( unsigned long _[FD.id] )
				"		{ _pack( unsigned long, overlay, [FD.Offset] ) = _[FD.id]; }
			}
			case [`string] {
				"	void set_[FD.id]( const char *d );
			}
			case [list_type] {
				TypeId: id = FD.record_field_type.list_type.id
				"	char *tail_[FD.id];
				"	void alloc_[FD.id]( [TypeId] &el );

			}
			case [`char `( N: number `)] {
				"	void set_[FD.id]( const char *s )
				"		{ memcpy( overlay + [FD.Offset], s, [FD.CharSize] ); }
			}
		}

		"	void send()
		"	{
		"		PacketBase::send( &writer );
		"	}
		"
		"	static void describe( PacketConnection *packetConn );
		"
		"	char *overlay;
		"	void open( PacketWriter *writer );
		"	static const unsigned short ID = [Packet->AppID * 1000 + Packet->NumID];
		"	static const char name\[\];
		"	static const char lower\[\];
		"};
		"
	}

	~}
	~

	#
	# Reading structs structs
	#

	~namespace Record {

	for Struct: _struct in StructMap {
		"struct [Struct->Id]
		"{
		"	[Struct->Id]( Rope *rope, long offset );

		for FD: record_field_def in Struct->StructDef {
			switch FD.record_field_type
			case [`bool] {
				"	bool [FD.id];
			}
			case [`int] {
				"	int [FD.id];
			}
			case [`uint] {
				"	unsigned int [FD.id];
			}
			case [`long] {
				"	long [FD.id];
			}
			case [`ulong] {
				"	unsigned long [FD.id];
			}
			case [`string] {
				"	char *[FD.id];
			}
			case [`char `( N: number `)] {
				"	char [FD.id]\[[FD.CharSize]\];
			}
		}

		"	void advance();
		"	bool valid();
		"	void load();
		"	long next;
		"	Rope *rope;
		"	long offset;
		"};
		"
	}

	for Packet: packet in PacketMap {
		"struct [Packet->Id]
		"	: public PacketBase
		"{
		"	[Packet->Id]( Rope *rope, long offset );

		for FD: record_field_def in Packet->PacketDef {
			switch FD.record_field_type
			case [`bool] {
				"	bool [FD.id];
			}
			case [`int] {
				"	int [FD.id];
			}
			case [`uint] {
				"	unsigned int [FD.id];
			}
			case [`long] {
				"	long [FD.id];
			}
			case [`ulong] {
				"	unsigned long [FD.id];
			}
			case [`string] {
				"	char *[FD.id];
			}
			case [list_type] {
				TypeId: id = FD.record_field_type.list_type.id
				"	uint32_t head_[FD.id];
			}
			case [`char `( N: number `)] {
				"	char [FD.id]\[[FD.CharSize]\];
			}
		}

		"	Rope *rope;
		"	static const unsigned short ID = [Packet->AppID * 1000 + Packet->NumID];
		"	static const char name\[\];
		"	static const char lower\[\];
		"};
		"
	}

	~}
	~
	~const char *packetLowerName( unsigned short id );
	~
	~#undef _pack
	~
	~#endif

	send Output [] eos

	writeOutput( Output->tree, 'packet_gen.h' )
}

void packetRecvDecls( Thread: thread )
{
	"	virtual void dispatchPacket( SelectFd *fd, Recv &recv );

	for Packet: packet in Thread->RecvsPktList {
		"	virtual void recv[Packet->Id]( SelectFd *fd, Record::[Packet->Id] *pkt ) = 0;
	}
}

void packetReceives( Thread: thread )
{
	"void [Thread->Id]Gen::dispatchPacket( SelectFd *fd, Recv &recv )
	"{
	"		switch ( recv.head->msgId ) {

	for Packet: packet in Thread->RecvsPktList {
		"			case (int) Record::[Packet->Id]::ID: {
		"				Record::[Packet->Id] rec( &recv.buf,
		"					sizeof(PacketBlockHeader) + sizeof(PacketHeader) );
		"				recv[Packet->Id]( fd, &rec );
		"				break;
		"			}
	}

	"		}
	"}
	"
	"
}

void generatePacketCode( P: program )
{
	Output = new parser<out_c::out_c>()
	_ = Output

	~/*
	~ * packet_gen.cc
	~ */
	~
	~#include "itq_gen.h"
	~#include "packet_gen.h"
	~#include <genf/thread.h>
	~

	definePack()

	for Struct: _struct in StructMap {
		for FD: record_field_def in Struct->StructDef {
			switch FD.record_field_type
			case String {
				"void Packer::[Struct->Id]::set_[FD.id]( const char *src )
				"{
				"	int length = strlen( src ) + 1;
				"	uint32_t offset = 0;
				"	char *dest = writer->allocBytes( length, offset );
				"	_pack( uint32_t, overlay, [FD.Offset] ) = offset;
				"	memcpy( dest, src, length );
				"}
				"
			}
		}
	}

	for Packet: packet in PacketMap {
		for FD: record_field_def in Packet->PacketDef {
			switch FD.record_field_type
			case String {
				"void Packer::[Packet->Id]::set_[FD.id]( const char *src )
				"{
				"	int length = strlen( src ) + 1;
				"	uint32_t offset = 0;
				"	char *dest = writer.allocBytes( length, offset );
				"	_pack( uint32_t, overlay, [FD.Offset] ) = offset;
				"	memcpy( dest, src, length );
				"}
				"
			}
			case [L: list_type] {
				TypeId: id = L.id
				El: _struct = findStruct( TypeId )

				"void Packer::[Packet->Id]::alloc_[FD.id]( [TypeId] &el )
				"{
				"	uint32_t offset = 0;
				"	char *elov = (char*)writer.allocBytes( [El->Size], offset );
				"	memset( elov, 0, [El->Size] );
				"	
				"	uint32_t head = _pack( uint32_t, overlay, [FD.Offset] );
				"	if ( head == 0 )
				"		_pack( uint32_t, overlay, [FD.Offset] ) = offset;
				"	else
				"		_pack( uint32_t, tail_[FD.id], [El->NextOffset] ) = offset;
				"
				"	tail_[FD.id] = elov;
				"	el.overlay = elov;
				"	el.writer = &writer;
				"}
				"
			}
		}

		"void Packer::[Packet->Id]::open( PacketWriter *writer )
		"{
		"	this->overlay = (char*)
		"			PacketBase::open( writer, [Packet->Id]::ID,
		"			[Packet->Size] );
		"}
		"

		Lower: str = packet_name::makeLower( Packet->Id )

		"const char Packer::[Packet->Id]::name\[\] = \"[Packet->Id]\";
		"const char Packer::[Packet->Id]::lower\[\] = \"[Lower]\";
		"
		"void Packer::[Packet->Id]::describe( PacketConnection *packetConn )
		"{
		"	if ( packetConn->describedPackets.find( [Packet->Id]::ID ) )
		"		return;
		"	packetConn->describedPackets.insert( [Packet->Id]::ID );
		"
		"	Packer::PacketType dest( packetConn );

			if Packet->NumFields > 0  {
				"	PacketField field;
			}
			"	dest.set__name( [Packet->Id]::lower );
			"	dest.set_numId( [Packet->Id]::ID );
			"	dest.set_numFields( [Packet->NumFields] );

			for FD: record_field_def in Packet->PacketDef {
				"	dest.alloc_fields( field );
				"	field.set_name( \"[FD.id]\" );
				"	field.set_type( [fieldTypeCode( FD )] );
				if ! match FD.opt_tag [] {
					"	field.set__tag( true );
				}
				"	field.set_size( [fieldSize( FD )] );
				"	field.set__offset( [FD.Offset] );

				if match FD.record_field_type [LT: list_type] {
					El: _struct = findStruct( LT.id )
					for SFD: record_field_def in El->StructDef {
						"	dest.alloc_fields( field );
						"	field.set_name( \"[SFD.id]\" );
						"	field.set_type( [fieldTypeCode( SFD )] );
						if ! match SFD.opt_tag [] {
							"	field.set__tag( true );
						}
						"	field.set_size( [fieldSize( SFD )] );
						"	field.set__offset( [SFD.Offset] );
					}
				}
			}
			"	dest.send();
		"}
	}

	for Struct: _struct in StructMap {
		"Record::[Struct->Id]::[Struct->Id]( Rope *rope, long offset )
		"	: rope(rope), offset(offset) 
		"{
		"	if ( offset != 0 )
		"		load();
		"}
		"
		"void Record::[Struct->Id]::advance()
		"{
		"	offset = next;
		"	if ( offset != 0 )
		"		load();
		"}
		"
		"bool Record::[Struct->Id]::valid()
		"{
		"	return offset != 0;
		"}
		"
		"void Record::[Struct->Id]::load()
		"{
		
		if record_field_def in Struct->StructDef {
			"	char *overlay = Thread::pktFind( rope, offset );

			for FD: record_field_def in Struct->StructDef {
				switch FD.record_field_type
				case Bool
					"	this->[FD.id] = _pack( bool, overlay, [FD.Offset] );
				case Int
					"	this->[FD.id] = _pack( int, overlay, [FD.Offset] );
				case UnsignedInt
					"	this->[FD.id] = _pack( unsigned int, overlay, [FD.Offset] );
				case Long
					"	this->[FD.id] = _pack( long, overlay, [FD.Offset] );
				case UnsignedLong
					"	this->[FD.id] = _pack( unsigned long, overlay, [FD.Offset] );
				case String
					"	this->[FD.id] = Thread::pktFind( rope,
					"		_pack( uint32_t, overlay, [FD.Offset] ) );
				case Char
					"	memcpy( this->[FD.id], overlay + [FD.Offset], [FD.CharSize] );
			}
		}

		"	this->next = _pack( uint32_t, overlay, [Struct->NextOffset] );
		"}
	}

	for Packet: packet in PacketMap {
		"Record::[Packet->Id]::[Packet->Id]( Rope *rope, long offset )
		"{
		"	this->rope = rope;
			
		if record_field_def in Packet->PacketDef {
			"	char *overlay = Thread::pktFind( rope, offset );;
			for FD: record_field_def in Packet->PacketDef {
				switch FD.record_field_type
				case Bool
					"	this->[FD.id] = _pack( bool, overlay, [FD.Offset] );
				case Int
					"	this->[FD.id] = _pack( int, overlay, [FD.Offset] );
				case UnsignedLong
					"	this->[FD.id] = _pack( int, overlay, [FD.Offset] );
				case Long
					"	this->[FD.id] = _pack( long, overlay, [FD.Offset] );
				case UnsignedLong
					"	this->[FD.id] = _pack( long, overlay, [FD.Offset] );
				case String
					"	this->[FD.id] = Thread::pktFind( rope,
					"		_pack( uint32_t, overlay, [FD.Offset] ) );
				case [L: list_type] {
					TypeId: id = L.id
					"	this->head_[FD.id] = _pack( uint32_t, overlay, [FD.Offset] );
				}
			}
		}

		"}

		Lower: str = packet_name::makeLower( Packet->Id )
		"const char Record::[Packet->Id]::name\[\] = \"[Packet->Id]\";
		"const char Record::[Packet->Id]::lower\[\] = \"[Lower]\";
		"

	}

	"const char *packetLowerName( unsigned short id )
	"{
	"	switch ( id ) {

	for Packet: packet in PacketMap {
		"	case Record::[Packet->Id]::ID: return Record::[Packet->Id]::lower;
	}

	"	}
	"	return \"unknown\";
	"}

	send Output [] eos

	writeOutput( Output->tree, 'packet_gen.cc' )
}

