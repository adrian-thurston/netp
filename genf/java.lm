void generateJava( P: program )
{
	Output = new parser<out_c::out_c>()
	_ = Output

	~/*
	~ * RecordGen.java
	~ */
	~
	~package net.colm.monitor;
	~
	~import java.io.OutputStream;
	~import java.io.UnsupportedEncodingException;
	~import java.nio.ByteBuffer;
	~import java.nio.ByteOrder;
	~import java.io.IOException;
	~import java.util.Arrays;
	~
	~abstract public class RecordGen
	~	extends RecordBase
	~{

	for Packet: packet in PacketMap {
		"void send[Packet->Id]( "

		Comma: str = ""
		for FD: record_field_def in Packet->PacketDef {
			switch FD.record_field_type
			case Bool
				"[Comma]boolean [FD.id]"
			case Int
				"[Comma]int [FD.id]"
			case UnsignedInt
				"[Comma]int [FD.id]"
			case Long
				"[Comma]long [FD.id]"
			case UnsignedLong
				"[Comma]long [FD.id]"
			case String
				"[Comma]String [FD.id]"
			case List { }
			case Char { }
			Comma = ", "
		}
			
		" )
		"{
		"	byte\[\] b = new byte\[[16 + Packet->Size]\];
		"	ByteBuffer bbb = ByteBuffer.wrap(b);
		"	bbb.order( ByteOrder.LITTLE_ENDIAN );
		"
		"	/* Next block length, id, total length, first length */
		"	bbb.putInt( 0,  0 );
		"	bbb.putInt( OFF_FIRST_LEN, [16 + Packet->Size] );
		"	bbb.putInt( OFF_TOTAL_LEN, [16 + Packet->Size] );
		"	bbb.putInt( OFF_MSG_ID,    [Packet->Id].ID );
		"

		for FD: record_field_def in Packet->PacketDef {
			switch FD.record_field_type
			case Bool
				"bbb.putByte( [16 + FD.Offset], [FD.id] );
			case Int
				"bbb.putInt( [16 + FD.Offset], [FD.id] );
			case UnsignedInt
				"bbb.putInt( [16 + FD.Offset], [FD.id] );
			case Long
				"bbb.putLong( [16 + FD.Offset], [FD.id] );
			case UnsignedLong
				"bbb.putLong( [16 + FD.Offset], [FD.id] );
			case String { }
			case List { }
			case Char { }
		}

		"	OutputStream output = null;
		"	try {
		"		output = socket.getOutputStream();
		"		output.write( b );
		"	}
		"	catch ( IOException e ) {
		"		e.printStackTrace();
		"	}
		"}
	}

	for Struct: _struct in StructMap {
		"public static class [Struct->Id]
		"{
		"	public [Struct->Id]( Record record, int offset )
		"	{
		"		this.record = record;
		"		this.offset = offset;
		"		if ( offset != 0 )
		"			load();
		"	}

		for FD: struct_field_def in Struct->StructDef {
			switch FD.struct_field_type
			case Bool {
				"	public byte [FD.id];
			}
			case Int {
				"	public int [FD.id];
			}
			case UnsignedInt {
				"	public int [FD.id];
			}
			case Long {
				"	public long [FD.id];
			}
			case UnsignedLong {
				"	public long [FD.id];
			}
			case String {
				"	public String [FD.id];
			}
			case Char {
				"	public byte\[\] [FD.id];
			}
		}

		"	int next;
		"	Record record;
		"	int offset;

		"public void advance()
		"{
		"	offset = next;
		"	if ( offset != 0 )
		"		load();
		"}
		"
		"public boolean valid()
		"{
		"	return offset != 0;
		"}
		"

		"void load()
		"{
		"	int len;
		"	int stroff;
		"	RecordPos strPos;
		"	RecordPos recordPos = pktFind( this.record, this.offset );
		"	

		for FD: struct_field_def in Struct->StructDef {
			switch FD.struct_field_type
			case Bool {
				"	this.[FD.id] = recordPos.element\[[FD.Offset]\];
			}
			case Int {
				"	this.[FD.id] = recordPos.block.getInt( recordPos.offset + [FD.Offset] );
			}
			case UnsignedInt {
				"	this.[FD.id] = recordPos.block.getInt( recordPos.offset + [FD.Offset] );
			}
			case Long {
				"	this.[FD.id] = recordPos.block.getLong( recordPos.offset + [FD.Offset] );
			}
			case UnsignedLong {
				"	this.[FD.id] = recordPos.block.getLong( recordPos.offset + [FD.Offset] );
			}
			case String {
				"	stroff = recordPos.block.getInt( recordPos.offset + [FD.Offset] );
				"	strPos = pktFind( record, stroff );
				"	len = packetStrLen( strPos );
				"	try {
				"		this.[FD.id] = new String( strPos.element,
				"				strPos.offset, len, \"ASCII\" );
				"	}
				"	catch ( UnsupportedEncodingException e )
				"	{
				"		e.printStackTrace();
				"	}
			}
			case Char {
				N: number = FD.struct_field_type.number
				"	this.[FD.id] = Arrays.copyOfRange( recordPos.element,
				"		recordPos.offset + [FD.Offset],
				"		recordPos.offset + [FD.Offset] + [N] );
			}
		}

		"	this.next = recordPos.block.getInt( recordPos.offset + [Struct->NextOffset] );
		"}
		"
		"}
	}

	for Packet: packet in PacketMap {
		"public static class [Packet->Id]
		"{

		for FD: record_field_def in Packet->PacketDef {
			switch FD.record_field_type
			case Bool {
				"	public boolean [FD.id];
			}
			case Int {
				"	public int [FD.id];
			}
			case UnsignedInt {
				"	public int [FD.id];
			}
			case Long {
				"	public long [FD.id];
			}
			case UnsignedLong {
				"	public long [FD.id];
			}
			case String {
				"	public String [FD.id];
			}
			case List {
				"	public int [FD.id];
			}
			case Char {
				"	public byte\[\] [FD.id];
			}
		}

		"	public Record record;

		"void read( Record record, int offset )
		"{
		"	int len;
		"	int stroff;
		"	RecordPos strPos;
		"	RecordPos recordPos = pktFind( record, offset );
		"	this.record = record;
		"	

		for FD: record_field_def in Packet->PacketDef {
			switch FD.record_field_type
			case Bool {
				"	this.[FD.id] = recordPos.block.getByte( recordPos.offset + [FD.Offset] );
			}
			case Int {
				"	this.[FD.id] = recordPos.block.getInt( recordPos.offset + [FD.Offset] );
			}
			case UnsignedInt {
				"	this.[FD.id] = recordPos.block.getInt( recordPos.offset + [FD.Offset] );
			}
			case Long {
				"	this.[FD.id] = recordPos.block.getLong( recordPos.offset + [FD.Offset] );
			}
			case UnsignedLong {
				"	this.[FD.id] = recordPos.block.getLong( recordPos.offset + [FD.Offset] );
			}
			case String {
				"	stroff = recordPos.block.getInt( recordPos.offset + [FD.Offset] );
				"	strPos = pktFind( record, stroff );
				"	len = packetStrLen( strPos );
				"	try {
				"		this.[FD.id] = new String( strPos.element, strPos.offset, len, \"ASCII\" );
				"	}
				"	catch ( UnsupportedEncodingException e )
				"	{
				"		e.printStackTrace();
				"	}
			}
			case Char {
				N: number = FD.record_field_type.number
				"	this.[FD.id] = Arrays.copyOfRange( recordPos.element,
				"		recordPos.offset + [FD.Offset],
				"		recordPos.offset + [FD.Offset] + [N] );
			}
			case List {
				"	this.[FD.id] = recordPos.block.getInt( recordPos.offset + [FD.Offset] );
			}
		}

		"	}
		"	static final int ID = [Packet->AppID * 1000 + Packet->NumID];
		"	static final int Size = [Packet->Size];
		"}
	}

	~void dispatch( Record record )
	~{
	~	// Log.i( LOG_TAG, "dispatching record parsing" );
	~	// System.out.println( record.totalLen );
	~
	~	switch ( record.msgId ) {

	for Packet: packet in PacketMap {
		"	case [Packet->Id].ID: {
		"		[Packet->Id] p = new [Packet->Id]();
		"		p.read( record, 16 );
			
		if ( Packet->Id == "MonitorDisp" ) {
			"	callback.received( p.content );
		}

		if ( Packet->Id == "QuoteList" ) {
			"	callback.received( p );
		}

		"		break;
		"	}
	}

	~	}
	~}

	~}

	send Output [] eos

	writeOutput( Output->tree, 'RecordGen.java' )
}

