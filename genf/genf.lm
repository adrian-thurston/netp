include 'grammar.lm'
include 'args.lm'
include 'out_c.lm'
include 'thread.lm'
include 'main.lm'
include 'analysis.lm'
include 'itq.lm'
include 'record.lm'
include 'kernf.lm'
include 'java.lm'

global _: parser<out_c::out_c>
global Output: parser<out_c::out_c>

void writeOutput( Output: out_c::out_c, Fn: str )
{
	S: stream = open( Fn, 'w' )
	send S [Output] eos
}

void generateAutomake( P: program )
{
	print "generate Makefile.am
}

void printHelp()
{
	print "genf \[options\] serv.gf
}

void generateCode( P: program )
{
	generateMainHeader( P )
	generateMainCode( P )

	for Thread: thread in ThreadMap {
		if ( Thread->Id != 'Main' ) {
			generateThreadHeader( Thread )
			generateThreadCode( Thread )
		}
	}

	generateItqHeader( P )
	generateItqCode( P )

	generatePacketHeader( P )
	generatePacketCode( P )
}

void addDefaultDefs( P: ref<program> )
{
	require P [DefList: definition*]
	
	cons PacketField: struct_def
		"struct PacketField
		"{
		"	string name;
		"	bool _tag;
		"	int type;
		"	int size;
		"	int _offset;
		"};

	cons PacketType: packet_def
		"packet PacketType
		"{
		"	string _name;
		"	int numId;
		"	int numFields;
		"	list<PacketField> fields;
		"};
	
	PacketType.GlobalPacketId = 1

	P = cons program [
		"option bool background: -b --background;
		"option string __debug: -D;
		"option string list moduleArgs: --module;
		"thread Main;
		"
		"
		PacketField
		PacketType
		DefList
	]
}

void main()
{
	parseArgs()

	if ( OptHelp ) {
		printHelp()
		exit(0)
	}

	if ( !OptInputFn ) {
		send stderr "ERROR: input file not given
		exit( 1 )
	}

	Input: stream = open( OptInputFn, 'r' )
	if ( !Input ) {
		send stderr "ERROR: could not open input file: [$OptInputFn]
		exit( 1 )
	}

	P: program = parse program [Input]
	if ( !P ) {
		send stderr "ERROR: could not parse input: [error]
		exit( 1 )
	}

	addDefaultDefs( P )
	semanticAnalysis( P )

	if ( OptAutomake )
		generateAutomake( P )
	else if ( OptKernf )
		generateKernf( P )
	else if ( OptJava )
		generateJava( P )
	else
		generateCode( P )
}

main()
